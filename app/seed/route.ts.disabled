import bcrypt from 'bcrypt';
import { db } from '@vercel/postgres';
import { tasks, todousers } from '../lib/placeholder-data';

const client = await db.connect();

async function seedToDoUsers() {
    await client.sql`CREATE EXTENSION IF NOT EXISTS "uuid-ossp"`;
    await client.sql`
        CREATE TABLE IF NOT EXISTS todoUsers (
            id UUID DEFAULT uuid_generate_v4() PRIMARY KEY,
            firstName VARCHAR(255) NOT NULL,
            middleName VARCHAR(255) NOT NULL,
            lastName VARCHAR(255) NOT NULL,
            email TEXT NOT NULL UNIQUE,
            password TEXT NOT NULL,
            isManager BOOL NOT NULL,
            managerId UUID
        );
    `;

    const insertedUsers = await Promise.all(
        todousers.map(async (user) => {
            const hashedPassword = await bcrypt.hash(user.password, 10);
            return client.sql`
                INSERT INTO todoUsers (
                    id, 
                    firstName,
                    middleName,
                    lastName,
                    email, 
                    password,
                    isManager,
                    managerId
                )
                VALUES (
                    ${user.id}, 
                    ${user.first_name}, 
                    ${user.middle_name},
                    ${user.last_name},
                    ${user.email},
                    ${hashedPassword},
                    ${user.is_manager},
                    ${user.manager_id}
                )
                ON CONFLICT (id) DO NOTHING;
            `;
        }),
    );

    return insertedUsers;
}

async function seedToDoTasks() {
    await client.sql`CREATE EXTENSION IF NOT EXISTS "uuid-ossp"`;

    // priority: 'high' | 'mid' | 'low';
    // status: 'todo' | 'progress' | 'done' | 'cancelled';

    await client.sql`
        CREATE TABLE IF NOT EXISTS todoTasks (
            id UUID DEFAULT uuid_generate_v4() PRIMARY KEY,
            name VARCHAR(255) NOT NULL,
            description TEXT,
            createDate TIMESTAMP WITH TIME ZONE NOT NULL,
            updateDate TIMESTAMP WITH TIME ZONE NOT NULL,
            endDate DATE NOT NULL,
            priority VARCHAR(255) NOT NULL,
            status VARCHAR(255) NOT NULL,
            creatorId UUID NOT NULL,
            responsibleUserId UUID NOT NULL
        );
    `;

    const insertedTasks = await Promise.all(
        tasks.map(
            (task) => client.sql`
                INSERT INTO todoTasks (
                    name,
                    description,
                    createDate,
                    updateDate,
                    endDate,
                    priority,
                    status,
                    creatorId,
                    responsibleUserId
                )
                VALUES (
                    ${task.name},
                    ${task.description},
                    ${task.createDate},
                    ${task.updateDate},
                    ${task.endDate},
                    ${task.priority},
                    ${task.status},
                    ${task.creator_id},
                    ${task.responsible_user_id}
                )
                ON CONFLICT (id) DO NOTHING;
            `,
        ),
    );

    return insertedTasks;
}

export async function GET() {
    try {
        await client.sql`BEGIN`;
        await seedToDoUsers();
        await seedToDoTasks();
        await client.sql`COMMIT`;

        return Response.json({ message: 'Database seeded successfully' });
    } catch (error) {
        await client.sql`ROLLBACK`;
        return Response.json({ error }, { status: 500 });
    }
}
